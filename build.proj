<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup Label="Directories">
        <!-- Top Level Directories -->
        <RepoDirectory Condition=" '$(RepoDirectory)' == '' ">$(MSBuildThisFileDirectory.TrimEnd('\\'))</RepoDirectory>
        <BinDirectory Condition=" '$(BinDirectory)' == '' ">$(RepoDirectory)\bin</BinDirectory>
        <LibDirectory Condition=" '$(LibDirectory)' == '' ">$(RepoDirectory)\lib</LibDirectory>
        <ScriptsDirectory Condition=" '$(ScriptsDirectory)' == '' ">$(RepoDirectory)\scripts</ScriptsDirectory>
        <SrcDirectory Condition=" '$(SrcDirectory)' == '' ">$(RepoDirectory)\src</SrcDirectory>
        <TestDirectory Condition=" '$(TestDirectory)' == '' ">$(RepoDirectory)\test</TestDirectory>
        <TestStagingDirectory Condition=" '$(TestStagingDirectory)' == '' ">$(TestDirectory)\lib</TestStagingDirectory>
    </PropertyGroup>

    <PropertyGroup Label="Configuration">
        <!-- Configurations -->
        <Configuration Condition=" '$(Configuration)' == '' ">debug</Configuration>

        <!-- Options -->
        <Official Condition=" '$(Official)' == '' ">false</Official>
        <RunTests Condition=" '$(RunTests)' == '' ">false</RunTests>
        
        <!--
        Sideload builds and references the @microsoft/security-devops-azdevops-task-lib repo.
        This requires it to be cloned to a parallel directory to the extension repo.
        -->
        <Sideload Condition=" '$(Sideload)' == '' ">false</Sideload>
        <SideloadBuild Condition=" '$(SideloadBuild)' == '' ">true</SideloadBuild>
        
        <NpmInstall Condition=" '$(NpmInstall)' == '' ">true</NpmInstall>
        <ForceNpmInstall Condition=" '$(Official)' == 'true' ">true</ForceNpmInstall>
        <ForceNpmInstall Condition=" '$(ForceNpmInstall)' == '' ">false</ForceNpmInstall>

        <!-- Targets -->
        <SkipCompileTsc Condition=" '$(SkipCompileTsc)' == '' ">false</SkipCompileTsc>
        <SkipCompile Condition=" '$(SkipCompile)' == '' ">false</SkipCompile>
    </PropertyGroup>

    <PropertyGroup Label="BuildPaths">
        <OutputDirectory Condition=" '$(OutputDirectory)' == '' ">$(BinDirectory)\$(Configuration)</OutputDirectory>
        <StagingDirectory Condition=" '$(StagingDirectory)' == '' ">$(LibDirectory)\$(Configuration)</StagingDirectory>
        <LibNodeModulesDirectory Condition= " '$(LibNodeModulesDirectory)' == '' ">$(LibDirectory)\node_modules</LibNodeModulesDirectory>
        <RepoNodeModulesDirectory Condition= " '$(RepoNodeModulesDirectory)' == '' ">$(RepoDirectory)\node_modules</RepoNodeModulesDirectory>
    </PropertyGroup>

    <PropertyGroup Label="Scripts">
        <PowerShellExe Condition=" '$(PowerShellExe)' == '' ">powershell.exe</PowerShellExe>
        <GetExtensionVersionScriptPath>$(ScriptsDirectory)\Get-ExtensionVersion.ps1</GetExtensionVersionScriptPath>
        <RollbackScriptPath>$(ScriptsDirectory)\Rollback.ps1</RollbackScriptPath>
        <SetPublisherInfoScriptPath>$(ScriptsDirectory)\Set-PublisherInfo.ps1</SetPublisherInfoScriptPath>
    </PropertyGroup>

    <!-- Configurations -->
    <PropertyGroup Condition=" '$(Configuration)' == 'debug' ">
        <ExtensionManifestFileName>extension-manifest-debug.json</ExtensionManifestFileName>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'release' ">
        <ExtensionManifestFileName>extension-manifest.json</ExtensionManifestFileName>
    </PropertyGroup>

    <PropertyGroup>
        <PublisherName Condition=" '$(Official)' == 'true' AND '$(PublisherName)' == '' ">debug</PublisherName>
        <ExtensionManifestFilePath>$(SrcDirectory)\$(ExtensionManifestFileName)</ExtensionManifestFilePath>
        <ExtensionIconFilePath>$(SrcDirectory)\icon.png</ExtensionIconFilePath>
        <ExtensionReadmeFilePath>$(SrcDirectory)\extension-readme.md</ExtensionReadmeFilePath>
        <ExtensionEulaFilePath>$(SrcDirectory)\extension-eula.md</ExtensionEulaFilePath>
        <CopyEula>true</CopyEula>
        <StagedExtensionManifestFilePath>$(StagingDirectory)\extension-manifest.json</StagedExtensionManifestFilePath>
        <OutputExtensionFileName>microsoft-security-devops-azdevops</OutputExtensionFileName>
        <OutputExtensionFilePath>$(OutputDirectory)\$(OutputExtensionFileName)</OutputExtensionFilePath>
        <OutputExtensionFilePath Condition=" '$(Configuration)' == 'debug'">$(OutputExtensionFilePath)-debug</OutputExtensionFilePath>
    </PropertyGroup>

    <ItemGroup Label="BuildTasks">
        <MicrosoftSecurityDevOpsV1 Include="MicrosoftSecurityDevOps">
            <MajorVersion>v1</MajorVersion>
            <Platform>Node</Platform>
        </MicrosoftSecurityDevOpsV1>
    </ItemGroup>

    <ItemGroup Condition=" '$(Configuration)' == 'debug'  ">
        <!-- debug only contributions -->
    </ItemGroup>

    <ItemGroup>
        <!-- contributions -->
        <BuildTask Include="@(MicrosoftSecurityDevOpsV1)" />
    </ItemGroup>

    <Target Name="ValidateConfiguration">
        <Error
            Condition=" '$(Configuration)' != 'debug' AND '$(Configuration)' != 'release' "
            Text="Invalid Configuration given: $(Configuration). Valid values are: debug, release" />
    </Target>

    <Target Name="Clean" DependsOnTargets="CleanTests">
        <Message Text="Deleting staging directory: $(StagingDirectory)" />
        <RemoveDir Directories="$(StagingDirectory)" Condition="Exists('$(StagingDirectory)')" />

        <Message Text="Deleting output directory: $(OutputDirectory)" />
        <RemoveDir Directories="$(OutputDirectory)" Condition="Exists('$(OutputDirectory)')" />
    </Target>

    <Target Name="CleanTests">
        <ItemGroup>
            <CompiledTestFiles Include="$(TestDirectory)\**\*.js" />
            <CompiledTestFiles Include="$(TestDirectory)\**\*.js.map" />
        </ItemGroup>
        <Delete Files="@(CompiledTestFiles)" />
        <RemoveDir Directories="$(TestStagingDirectory)" />
    </Target>

    <Target
        Name="NpmInstall-RepoDirectory"
        Inputs="$(RepoDirectory)"
        Outputs="$(RepoNodeModulesDirectory)"
        Condition=" '$(NpmInstall)' == 'true' AND ('$(ForceNpmInstall)' == 'true' OR EXISTS('$(RepoNodeModulesDirectory)') != 'true')">
        <Message Text="Intstalling npm packages in repo directory: $(RepoDirectory)..." />
        <Exec Command="npm install" WorkingDirectory="$(RepoDirectory)" />
    </Target>

    <Target
        Name="CompileTsc"
        Condition=" '$(SkipCompileTsc)' != 'true' ">
        <Message Text="Compiling Microsoft Security DevOps for Azure DevOps Extension" />
        <Exec Command="npx tsc --outDir &quot;$(StagingDirectory)&quot;" WorkingDirectory="$(SrcDirectory)" />
    </Target>

    <Target
        Name="Compile"
        DependsOnTargets="Clean;NpmInstall-RepoDirectory;CompileTsc"
        Condition=" '$(SkipCompile)' != 'true' ">
        <PropertyGroup>
            <RepoPackageJsonFilePath>$(RepoDirectory)\package.json</RepoPackageJsonFilePath>
            <SrcNpmrcFilePath>$(SrcDirectory)\.npmrc</SrcNpmrcFilePath>
        </PropertyGroup>

        <Copy SourceFiles="$(RepoPackageJsonFilePath)" DestinationFiles="$(LibDirectory)\package.json" />
        <Copy SourceFiles="$(SrcNpmrcFilePath)" DestinationFiles="$(LibDirectory)\.npmrc" />
    </Target>

    <Target Name="CompileTests" DependsOnTargets="CleanTests;NpmInstall-RepoDirectory">
        <Message Text="Compiling tests" />
        <Exec Command="npx tsc --outDir &quot;$(TestStagingDirectory)&quot;"  WorkingDirectory="$(TestDirectory)" />
    </Target>

    <Target
        Name="NpmInstall-LibDirectory"
        Inputs="$(LibDirectory)"
        Outputs="$(LibDirectory)\node_modules"
        Condition=" '$(NpmInstall)' == 'true' AND ('$(ForceNpmInstall)' == 'true' OR EXISTS('$(LibDirectory)\node_modules') != 'true') ">
        <Message Text="Installing npm packages staging directory: $(StagingDirectory)..." />
        <Exec Command="npm install --production" WorkingDirectory="$(StagingDirectory)" />
    </Target>

    <Target
        Name="Sideload"
        Condition=" '$(Sideload)' == 'true' ">
        <PropertyGroup>
            <TaskLibSrcDirectory>$(MSBuildThisFileDirectory)..\security-devops-azdevops-task-lib</TaskLibSrcDirectory>
            <TaskLibDistDirectory>$(TaskLibSrcDirectory)\dist</TaskLibDistDirectory>
            <TaskLibNodeModulesDirectory>$(LibNodeModulesDirectory)\@microsoft\security-devops-azdevops-task-lib</TaskLibNodeModulesDirectory>
        </PropertyGroup>
        <Message Text="Sideload mode enabled. Linking @microsoft/security-devops-azdevops-task-lib" />
        <Error
            Condition=" !Exists('$(TaskLibSrcDirectory)') "
            Text="Could not find task lib repo directory: $(TaskLibSrcDirectory). Please clone the repo to a parallel directory to this extension repo. Repo homepage: https://github.com/microsoft/security-devops-azdevops-task-lib" />

        <Message Condition=" '$(SideloadBuild)' == 'true' " Text="Building sideload project: npm run build" />
        <Exec Condition=" '$(SideloadBuild)' == 'true' " Command="npm run build" WorkingDirectory="$(TaskLibSrcDirectory)" />

        <Message Text="Remove existing task lib directory: $(TaskLibNodeModulesDirectory)" />
        <RemoveDir Directories="$(TaskLibNodeModulesDirectory)" Condition=" Exists('$(TaskLibNodeModulesDirectory)') " />

        <ItemGroup>
            <TaskLibDistFiles Include="$(TaskLibDistDirectory)\**\*" />
        </ItemGroup>

        <Message Text="Copying sideload build..." />
        <Copy
            SourceFiles="@(TaskLibDistFiles)"
            DestinationFiles="@(TaskLibDistFiles->'$(TaskLibNodeModulesDirectory)\%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="Stage" DependsOnTargets="NpmInstall-LibDirectory;Sideload">
        <PropertyGroup>
            <StagingNodeModulesBinDirectory>$(LibNodeModulesDirectory)\.bin</StagingNodeModulesBinDirectory>
            <StagingPackageLockJsonFilePath>$(LibNodeModulesDirectory)\.package-lock.json</StagingPackageLockJsonFilePath>
        </PropertyGroup>

        <Message Text="Staging extension files to directory: $(StagingDirectory)" />

        <RemoveDir Directories="$(StagingNodeModulesBinDirectory)" Condition=" Exists('$(StagingNodeModulesBinDirectory)') " />
        <Delete Files="$(StagingPackageLockJsonFilePath)" Condition=" Exists('$(StagingPackageLockJsonFilePath)') " />
        <Delete Files="$(RepoDirectory)/package-lock.json" Condition=" Exists('$(RepoDirectory)/package-lock.json') " />

        <!-- Copy the Extension files -->
        <Copy SourceFiles="$(ExtensionManifestFilePath)" DestinationFiles="$(StagedExtensionManifestFilePath)" />
        <Copy SourceFiles="$(ExtensionIconFilePath)" DestinationFiles="$(StagingDirectory)\icon.png" />
        <Copy SourceFiles="$(ExtensionReadmeFilePath)" DestinationFiles="$(StagingDirectory)\readme.md" />
        <Copy SourceFiles="$(ExtensionEulaFilePath)" DestinationFiles="$(StagingDirectory)\eula.md" Condition=" '$(CopyEula)' == 'true' " />
    </Target>

    <Target
        Name="Stage-BuildTask"
        Inputs="@(BuildTask)"
        Outputs="$(StagingDirectory)\%(BuildTask.Identity)\%(BuildTask.MajorVersion)"
        AfterTargets="Stage">

        <PropertyGroup>
            <BuildTaskSourceFolder>$(SrcDirectory)\%(BuildTask.Identity)</BuildTaskSourceFolder>
            <BuildTaskSourceFolder Condition=" '%(BuildTask.MajorVersion)' != '' ">$(BuildTaskSourceFolder)\%(BuildTask.MajorVersion)</BuildTaskSourceFolder>

            <BuildTaskStagingFolder>$(StagingDirectory)\%(BuildTask.Identity)</BuildTaskStagingFolder>
            <BuildTaskStagingFolder Condition=" '%(BuildTask.MajorVersion)' != '' ">$(BuildTaskStagingFolder)\%(BuildTask.MajorVersion)</BuildTaskStagingFolder>

            <IconSourceFilePath Condition=" '%(BuildTask.IconPath)' == '' ">$(SrcDirectory)\icon.png</IconSourceFilePath>
            <IconStagingFilePath>$(BuildTaskStagingFolder)\icon.png</IconStagingFilePath>

            <InputMapPath>$(BuildTaskSourceFolder)\inputMap.json</InputMapPath>
        </PropertyGroup>

        <ItemGroup>
            <!-- Node Build Tasks -->
            <StagingNodeModuleFiles
                Condition=" '%(BuildTask.Platform)' == 'Node' "
                Include="$(LibNodeModulesDirectory)\**\*" />
            <BuildTaskFiles
                Condition=" '%(BuildTask.Platform)' == 'Node' "
                Include="$(BuildTaskSourceFolder)\*.js" />
            <BuildTaskFiles
                Condition=" '%(BuildTask.Platform)' == 'Node' "
                Include="$(BuildTaskSourceFolder)\task.json" />
            <BuildTaskFiles
                Condition=" '%(BuildTask.Platform)' == 'Node' And Exists('$(BuildTaskSourceFolder)\task.loc.json') "
                Include="$(BuildTaskSourceFolder)\task.loc.json" />
            <BuildTaskFiles
                Condition=" '%(BuildTask.Platform)' == 'Node' "
                Include="$(BuildTaskSourceFolder)\**\*.resjson" />
            <BuildTaskFiles
                Condition=" '%(BuildTask.Platform)' == 'Node' And Exists('$(InputMapPath)') "
                Include="$(InputMapPath)" />
            <BuildTaskFiles
                Include="%(BuildTask.AdditionalFiles)" />
        </ItemGroup>

        <Message Text="Staging build task directory: %(BuildTask.Identity) %(BuildTask.MajorVersion)" />

        <!-- Copy build task files  -->
        <Error
            Condition=" '@(BuildTaskFiles->Count())' == 0 "
            Text="BuildTaskFiles files were not found during staging." />
        <Copy
            SourceFiles="@(BuildTaskFiles)"
            DestinationFiles="@(BuildTaskFiles->'$(BuildTaskStagingFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />

        <!-- Copy node_modules -->
        <Error
            Condition=" '%(BuildTask.Platform)' == 'Node' AND '@(StagingNodeModuleFiles->Count())' == 0 "
            Text="StagingNodeModuleFiles files were not found during staging." />
        <Copy
            SourceFiles="@(StagingNodeModuleFiles)"
            DestinationFiles="@(StagingNodeModuleFiles->'$(BuildTaskStagingFolder)\node_modules\%(RecursiveDir)%(Filename)%(Extension)')"
            Condition=" '%(BuildTask.Platform)' == 'Node' " />

        <!-- Copy build task icon, if one does not already exist -->
        <Copy
            SourceFiles="$(IconSourceFilePath)"
            DestinationFiles="$(IconStagingFilePath)"
            Condition=" !Exists('$(IconStagingFilePath)') " />

    </Target>

    <Target Name="CopyTestHelpers" DependsOnTargets="CompileTests;Stage-BuildTask">
        <Message Text="Copy Test Helper files to: $(TestStagingDirectory)" />

        <ItemGroup>
            <TestHelperFiles Include="$(TestDirectory)\**\*.json" />
        </ItemGroup>

        <Copy SourceFiles="$(BuildTaskSourceFolder)\task.json" DestinationFiles="$(TestStagingDirectory)\task.json" />
        <Copy SourceFiles="@(TestHelperFiles)" DestinationFolder="$(TestStagingDirectory)\%(RecursiveDir)" SkipUnchangedFiles="true" />
    </Target>

    <Target Name="Test" Condition=" '$(RunTests)' == 'true' " DependsOnTargets="CopyTestHelpers">
        <Message Text="Compiling Microsoft Security DevOps for Azure DevOps Extension" />
        <Exec Command="npx mocha **/*.tests.js" WorkingDirectory="$(TestStagingDirectory)" />
    </Target>

    <Target Name="Ext-Prep" Condition=" '$(Configuration)' == 'debug' ">
        <Message Text="Updating publisher information..." />
        <Exec Command="&quot;$(PowerShellExe)&quot; -NonInteractive -NoProfile -ExecutionPolicy Unrestricted -Command &quot;&amp; { &amp; '$(SetPublisherInfoScriptPath)' -ManifestPath '$(StagedExtensionManifestFilePath)' -StagingDirectory '$(StagingDirectory)' -PublishersDirectory '$(PublishersDirectory)' -PublisherName '$(PublisherName)' } &quot;" />
    </Target>

    <Target Name="Ext-GetVersion">
        <Message Text="Getting extension version for output filename..." />
        <Exec
            Command="&quot;$(PowerShellExe)&quot; -NonInteractive -NoProfile -ExecutionPolicy Unrestricted -Command &quot;&amp; { $(GetExtensionVersionScriptPath) -FilePath '$(StagedExtensionManifestFilePath)' } &quot;"
            ConsoleToMSBuild="true" >
            <Output TaskParameter="ConsoleOutput" PropertyName="EXTENSION_VERSION" />
        </Exec>
    </Target>   

    <Target Name="Ext-Build" DependsOnTargets="Ext-Prep;Ext-GetVersion">
        <Message Text="Building DevOps extension..." />
        <Exec
            Command="npx tfx extension create --manifest-globs &quot;$(StagedExtensionManifestFilePath)&quot; --output-path &quot;$(OutputExtensionFilePath).$(EXTENSION_VERSION).vsix&quot;"
            WorkingDirectory="$(StagingDirectory)" />
    </Target>

    <Target Name="Build" DependsOnTargets="ValidateConfiguration;Compile;Stage;Test;Ext-Build"></Target>

    <Target Name="Ext-GetRollbackVersion">
        <Message Text="Getting rollback extension version..." />
        <Exec
            Command="&quot;$(PowerShellExe)&quot; -NonInteractive -NoProfile -ExecutionPolicy Unrestricted -Command &quot;&amp; { $(GetExtensionVersionScriptPath) -FilePath '$(StagedExtensionManifestFilePath)' } &quot;"
            ConsoleToMSBuild="true" >
            <Output TaskParameter="ConsoleOutput" PropertyName="EXTENSION_ROLLBACK_VERSION" />
        </Exec>
    </Target>

    <Target Name="Ext-PrepareRollback">
        <Message Text="Preparing rollback extension..." />
        <Exec
            Command="&quot;$(PowerShellExe)&quot; -NonInteractive -NoProfile -ExecutionPolicy Unrestricted -Command &quot;&amp; { $(RollbackScriptPath) -ExtensionFilePath '$(StagedExtensionManifestFilePath)' -Configuration '$(Configuration)' } &quot;"
            ConsoleToMSBuild="true" />
    </Target>

    <Target Name="Rollback" DependsOnTargets="Ext-GetVersion;Ext-PrepareRollback;Ext-GetRollbackVersion">
        <Message Text="Building DevOps rollback extension..." />
        <Exec
            Command="npx tfx extension create --manifest-globs &quot;$(StagedExtensionManifestFilePath)&quot; --output-path &quot;$(OutputExtensionFilePath).$(EXTENSION_VERSION)-rollback-$(EXTENSION_ROLLBACK_VERSION).vsix&quot;"
            WorkingDirectory="$(StagingDirectory)" />
    </Target>

</Project>